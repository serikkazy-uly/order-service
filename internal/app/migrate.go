package app

import (
	"fmt"
	"log"

	"github.com/golang-migrate/migrate/v4"
	"github.com/golang-migrate/migrate/v4/database/postgres"
	_ "github.com/golang-migrate/migrate/v4/source/file"
	"github.com/jmoiron/sqlx"
)

// RunMigrations –≤—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
func RunMigrations(db *sqlx.DB) error {
	// –ü–æ–ª—É—á–∞–µ–º *sql.DB –∏–∑ *sqlx.DB
	sqlDB := db.DB

	driver, err := postgres.WithInstance(sqlDB, &postgres.Config{})
	if err != nil {
		return fmt.Errorf("could not create postgres driver: %w", err)
	}

	// –ü—É—Ç—å –∫ –º–∏–≥—Ä–∞—Ü–∏—è–º
	migrationsPath := "file://internal/migrations"

	m, err := migrate.NewWithDatabaseInstance(
		migrationsPath,
		"postgres",
		driver,
	)
	if err != nil {
		return fmt.Errorf("could not create migrate instance: %w", err)
	}

	// –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
	err = m.Up()
	if err != nil && err != migrate.ErrNoChange {
		return fmt.Errorf("could not run migrations: %w", err)
	}

	if err == migrate.ErrNoChange {
		log.Println("üìã No migrations to apply")
	} else {
		log.Println("‚úÖ Migrations applied successfully")
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
	version, dirty, err := m.Version()
	if err != nil {
		log.Printf("‚ö†Ô∏è  Warning: Could not get migration version: %v", err)
	} else {
		log.Printf("üìã Current migration version: %d (dirty: %t)", version, dirty)
	}

	return nil
}
